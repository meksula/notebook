Title: Parallel and Asynchronous Programming with Streams and CompletableFuture by Venkat Subramaniam
Link: https://www.youtube.com/watch?v=IwJ-SCfXoAU

Martin Fowler "Collection pipeline pattern" - międzyinnymi, Java Stream API jest implementacją tego wzorca.

You should never have more threads than cores you have!
                                        Vencat Subramaniam

Opcja dla JVM, określamy ile maksymalnie wątków będzie działało równolegle.
Jak ustawimy na "0", to aplikacja będzie działać tylko na wątku "main".
Każda liczba > 0 jest kolejnym wątkiem dopuszczalnym dla danego procesu.
Trzeba bardzo uważać, stosując tą flagę.

    -Djava.util.concurrent.ForkJoinPool.common.parallelism=10


CompletableFuture stosuje ten sam koncept co Promises w JavaScript
CompletableFuture ma stages.
Czym jest stage?
 - Pipeline of execution
 - Możemy przechodzić z jednej do kolejnej stage
 - każdy, pojedyńczy Stage przyjmuje CompletableFuture i zwraca kolejny CompletableFuture


 Jaka jest relacja między Stream a CompletableFuture?
    * Oba obiekty de facto dostarczają nam `lazy pipeline` do przetwarzania informacji

      Stream        |       CompletableFuture
 0, 1 or more       |   0 or 1
 only data channel  |   data chanel and error channel
 forEach()          |   thenAccept()
 map()              |   map()

 Każdy taki pipeline może znajdować się w jednym z trzech stanów:
 - pending state
 - resolved state
 - rejected state

 ! Nigdy nie rób niczego bez timeoutu! (nawet w prawdziwym życiu xD)